# loc_ky_thuat_streamlit.py

import streamlit as st
import pandas as pd
import numpy as np
from vnstock import Vnstock
from datetime import datetime, timedelta
from vnstock import listing_companies
import io

st.set_page_config(page_title="L·ªçc c·ªï phi·∫øu k·ªπ thu·∫≠t to√†n th·ªã tr∆∞·ªùng", layout="wide")

# ======================== C√ÄI ƒê·∫∂T =============================
start_date = st.date_input("Ch·ªçn ng√†y b·∫Øt ƒë·∫ßu", datetime.now() - timedelta(days=120))
end_date = st.date_input("Ch·ªçn ng√†y k·∫øt th√∫c", datetime.now())

resolution = "1D"

st.markdown("""
## üß† Nguy√™n l√Ω l·ªçc k·ªπ thu·∫≠t:
| Ch·ªâ b√°o | √ù nghƒ©a | ƒêi·ªÅu ki·ªán l·ªçc |
|--------|--------|-----------------------------|
| MA20   | Xu h∆∞·ªõng trung h·∫°n | Close > MA20 v√† c·∫Øt l√™n |
| MACD   | ƒê·ªông l∆∞·ª£ng | MACD > Signal v√† c·∫Øt l√™n |
| RSI    | S·ª©c m·∫°nh xu h∆∞·ªõng | RSI trong kho·∫£ng 50‚Äì80 |
| BB     | Bi·∫øn ƒë·ªông | Gi√° v∆∞·ª£t band tr√™n BB |
| ADX    | ƒê·ªô m·∫°nh xu h∆∞·ªõng | ADX > 20 |
""")

# ======================== CH·ªà B√ÅO =============================
def add_indicators(df):
    df['MA20'] = df['close'].rolling(window=20).mean()
    df['EMA12'] = df['close'].ewm(span=12, adjust=False).mean()
    df['EMA26'] = df['close'].ewm(span=26, adjust=False).mean()
    df['MACD'] = df['EMA12'] - df['EMA26']
    df['Signal'] = df['MACD'].ewm(span=9, adjust=False).mean()
    df['RSI'] = compute_rsi(df['close'])
    df['20SD'] = df['close'].rolling(window=20).std()
    df['UpperBB'] = df['MA20'] + 2 * df['20SD']
    df['LowerBB'] = df['MA20'] - 2 * df['20SD']
    df['ADX'] = compute_adx(df)
    return df

def compute_rsi(series, period=14):
    delta = series.diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
    rs = gain / loss
    return 100 - (100 / (1 + rs))

def compute_adx(df, n=14):
    high = df['high']
    low = df['low']
    close = df['close']
    plus_dm = high.diff()
    minus_dm = low.diff()
    plus_dm = plus_dm.where((plus_dm > minus_dm) & (plus_dm > 0), 0.0)
    minus_dm = minus_dm.where((minus_dm > plus_dm) & (minus_dm > 0), 0.0)
    tr = pd.concat([
        high - low,
        (high - close.shift()).abs(),
        (low - close.shift()).abs()
    ], axis=1).max(axis=1)
    atr = tr.rolling(n).mean()
    plus_di = 100 * (plus_dm.rolling(n).sum() / atr)
    minus_di = 100 * (minus_dm.rolling(n).sum() / atr)
    dx = (abs(plus_di - minus_di) / (plus_di + minus_di)) * 100
    return dx.rolling(n).mean()

# ======================== LOGIC L·ªåC =============================
def score_stock(df):
    score = 0
    reasons = []
    if df['close'].iloc[-1] > df['MA20'].iloc[-1] and df['close'].iloc[-2] < df['MA20'].iloc[-2]:
        score += 1
        reasons.append("MA20: c·∫Øt l√™n v√† tr√™n MA20")
    if df['MACD'].iloc[-1] > df['Signal'].iloc[-1] and df['MACD'].iloc[-2] < df['Signal'].iloc[-2]:
        score += 1
        reasons.append("MACD: c·∫Øt l√™n signal")
    if 50 <= df['RSI'].iloc[-1] <= 80:
        score += 1
        reasons.append("RSI: trong v√πng m·∫°nh (50‚Äì80)")
    if df['close'].iloc[-1] > df['UpperBB'].iloc[-1]:
        score += 1
        reasons.append("BB: gi√° v∆∞·ª£t d·∫£i tr√™n")
    if df['ADX'].iloc[-1] > 20:
        score += 1
        reasons.append("ADX: xu h∆∞·ªõng m·∫°nh")
    return score, ", ".join(reasons)

# ======================== TH·ª∞C THI =============================
if st.button("üöÄ B·∫Øt ƒë·∫ßu l·ªçc c·ªï phi·∫øu k·ªπ thu·∫≠t"):
    all_symbols = listing_companies()['ticker'].tolist()
    result = []
    progress = st.progress(0)

    for i, symbol in enumerate(all_symbols):
        try:
            df = Vnstock().stock(symbol=symbol, source="TCBS").price.history(
                start=start_date.strftime("%Y-%m-%d"),
                end=end_date.strftime("%Y-%m-%d"),
                resolution=resolution
            )
            if df is None or len(df) < 30:
                continue
            df = add_indicators(df)
            score, note = score_stock(df)
            if score >= 3:
                result.append({"M√£": symbol, "ƒêi·ªÉm": score, "Chi ti·∫øt": note})
        except:
            continue
        progress.progress((i + 1) / len(all_symbols))

    if result:
        df_result = pd.DataFrame(result).sort_values(by="ƒêi·ªÉm", ascending=False)
        st.success(f"‚úÖ C√≥ {len(df_result)} m√£ c·ªï phi·∫øu ƒë·∫°t ƒëi·ªÅu ki·ªán!")
        st.dataframe(df_result)

        with io.BytesIO() as output:
            with pd.ExcelWriter(output, engine="openpyxl") as writer:
                df_result.to_excel(writer, index=False)
            st.download_button(
                label="üì• T·∫£i k·∫øt qu·∫£ Excel",
                data=output.getvalue(),
                file_name="ket_qua_loc_ky_thuat.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
    else:
        st.warning("Kh√¥ng c√≥ m√£ n√†o ƒë·∫°t ƒë·ªß ƒëi·ªÅu ki·ªán.")
